<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta content="width=device-width, initial-scale=1.0" name="viewport">

  <title>Translator</title>
  <meta content="" name="description">
  <meta content="" name="keywords">

 <!-- Favicons -->
 <link href="./Maxim/assets/img/favicon.png" rel="icon">
 <link href="./Maxim/assets/img/apple-touch-icon.png" rel="apple-touch-icon">

 <!-- Google Fonts -->
 <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i|Raleway:300,300i,400,400i,500,500i,600,600i,700,700i|Poppins:300,300i,400,400i,500,500i,600,600i,700,700i" rel="stylesheet">

 <!-- Vendor CSS Files -->
 <link href="./Maxim/assets/vendor/aos/aos.css" rel="stylesheet">
 <link href="./Maxim/assets/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
 <link href="./Maxim/assets/vendor/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
 <link href="./Maxim/assets/vendor/boxicons/css/boxicons.min.css" rel="stylesheet">
 <link href="./Maxim/assets/vendor/glightbox/css/glightbox.min.css" rel="stylesheet">
 <link href="./Maxim/assets/vendor/swiper/swiper-bundle.min.css" rel="stylesheet">
 <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
 <!-- Template Main CSS File -->

 <link href="./Maxim/assets/css/style.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/handpose"></script>
  <script type="module" src="./assets/fingerpose.js"></script>
  
  <style>

    * {
      box-sizing: border-box;
      user-select: none;
    }

    /* html, body {
      width: 100%;
      height: 100%;
      overflow: hidden;
      font-family: Arial, sans-serif;
      color: #ffffff;
    } */

    body {
      margin: 0;
      padding: 0;
    }

    #video-container {
      /* width: 640px;
      height: 480px; */
      width: 300px;
      height: 300px;
      position: relative;
    }

    .layer {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }

    #pose-video {
      transform: scaleX(-1);
    }

    #pose-result {
      font-size: 100px;
      text-align: right;
      padding: 20px 30px 0 0;
    }
  </style>
</head>
<body>
  <!-- ======= Header ======= -->
  <header id="header" class="fixed-top d-flex align-items-center">
    <div class="container d-flex justify-content-between">

      <div class="logo">
        <h1><a href="index.html">SignScape</a></h1>
        <!-- Uncomment below if you prefer to use an image logo -->
        <!-- <a href="index.html"><img src="assets/img/logo.png" alt="" class="img-fluid"></a>-->
      </div>

      <nav id="navbar" class="navbar">
        <ul>
          <li><a class="nav-link scrollto" href="/">Home</a></li>
          <li><a class="nav-link scrollto" href="/dash#portfolio">Practice</a></li>
          <li class="dropdown"><a href="#" class="active"><span>Translate</span> <i class="bi bi-chevron-down"></i></a>
            <ul>
              <li><a href="/translate">English To ASL</a></li>
              <li><a href="/translateTwo">ASL to English</a></li>
            </ul>
          </li>
          <li><a class="nav-link scrollto" href="/pagination">Common Words</a></li>
          <li class="dropdown"><a href="#"><span>Connect</span> <i class="bi bi-chevron-down"></i></a>
            <ul>
              <li><a href="/webinar">Webinar</a></li>
              <li><a href="/forum">Forum</a></li>
            </ul>
          </li>
          <li><a class="nav-link scrollto" href="/profile">Profile</a></li>
          <li><a class="nav-link scrollto" href="/logout">Log Out</a></li>
        </ul>
        <i class="bi bi-list mobile-nav-toggle"></i>
      </nav><!-- .navbar -->

    </div>
  </header><!-- End Header -->

  <main id="main" style="min-height:100vh;">

    <!-- ======= Breadcrumbs Section ======= -->
    <section class="breadcrumbs">
      <div class="container">

        <div class="d-flex justify-content-between align-items-center">
          <h2>Translate - English To ASL</h2>
          <ol>
            <li><a href="/">Home</a></li>
            <li>Translate</li>
          </ol>
        </div>

      </div>
    </section><!-- End Breadcrumbs Section -->

  <div class="d-flex justify-content-center align-items-center" style="margin: auto;">
  <div id="video-container" class="p-3 m-4">
    <video id="pose-video" class="layer" playsinline></video>
    <canvas id="pose-canvas" class="layer"></canvas>
    <div id="pose-result" class="layer"></div>
  </div>
  <div class="bg-dark p-3 m-4">
    Hello
  </div>
  </div>
  </main><!-- End #main -->

  <!-- ======= Footer ======= -->
  <%- include ("./partials/footer.ejs") %>
  <!-- End Footer -->
  <a href="#" class="back-to-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>

  <script>
    var flag = false;
    var found = "";
    const config = {
      video: { width: 400, height: 400, fps: 30 }
    };

    const landmarkColors = {
      thumb: 'red',
      indexFinger: 'blue',
      middleFinger: 'yellow',
      ringFinger: 'green',
      pinky: 'pink',
      palmBase: 'white'
    };

    const gestureStrings = {
      'thumbs_up': '👍',
      'victory': '✌🏻',
      'a':'A',
      'b':'B',
      'c':'C',
      'd':'D',
      'e':'E',
      'f':'F',
      'g':'G',
      'h':'H',
      'i':'I',
      'j':'J',
      'k':'K',
      'l':'L',
      'm':'M',
      'n':'N',
      'o':'O',
      'p':'P',
      'q':'Q',
      'r':'R',
      's':'S',
      't':'T',
      'u':'U',
      'v':'V',
      'w':'W',
      'x':'X',
      'y':'Y',
      'z':'Z'
    };

    async function main() {

      const video = document.querySelector("#pose-video");
      const canvas = document.querySelector("#pose-canvas");
      const ctx = canvas.getContext("2d");

      const resultLayer = document.querySelector("#pose-result");

      // configure gesture estimator
      // add "✌🏻" and "👍" as sample gestures
      const knownGestures = [
        fp.Gestures.VictoryGesture,
        fp.Gestures.ThumbsUpGesture,
        fp.Gestures.LoveYouGesture,
        fp.Gestures.AGesture,
        fp.Gestures.BGesture,
        fp.Gestures.CGesture,
        fp.Gestures.DGesture,
        fp.Gestures.EGesture,
        fp.Gestures.FGesture,
        fp.Gestures.GGesture,
        fp.Gestures.HGesture,
        fp.Gestures.IGesture,
        fp.Gestures.JGesture,
        fp.Gestures.KGesture,
        fp.Gestures.LGesture,
        fp.Gestures.MGesture,
        fp.Gestures.NGesture,
        fp.Gestures.OGesture,
        fp.Gestures.PGesture,
        fp.Gestures.QGesture,
        fp.Gestures.RGesture,
        fp.Gestures.SGesture,
        fp.Gestures.TGesture,
        fp.Gestures.UGesture,
        fp.Gestures.VGesture,
        fp.Gestures.WGesture,
        fp.Gestures.XGesture,
        fp.Gestures.YGesture,
        fp.Gestures.ZGesture,
      ];
      const GE = new fp.GestureEstimator(knownGestures);

      // load handpose model
      const model = await handpose.load();
      console.log("Handpose model loaded");

      // main estimation loop
      const estimateHands = async () => {

        // clear canvas overlay
        ctx.clearRect(0, 0, config.video.width, config.video.height);
        resultLayer.innerText = '';

        // get hand landmarks from video
        // Note: Handpose currently only detects one hand at a time
        // Therefore the maximum number of predictions is 1
        const predictions = await model.estimateHands(video, true);

        for(let i = 0; i < predictions.length; i++) {

          // draw colored dots at each predicted joint position
          for(let part in predictions[i].annotations) {
            for(let point of predictions[i].annotations[part]) {
              drawPoint(ctx, point[0], point[1], 3, landmarkColors[part]);
            }
          }

          // now estimate gestures based on landmarks
          // using a minimum confidence of 7.5 (out of 10)
          const est = GE.estimate(predictions[i].landmarks, 7.5);

          if(est.gestures.length > 0) {
            // console.log(est);
            // find gesture with highest confidence
            let result = est.gestures.reduce((p, c) => { 
              
              return (p.confidence > c.confidence) ? p : c;
            });
            found = result.name;
            flag = true;
            resultLayer.innerText = gestureStrings[result.name];
            if(flag == true){
              console.log(found);
            }
          }
        }

        // ...and so on
        setTimeout(() => { 
          estimateHands(); 
          flag = false;
        }, 700);
      };

      estimateHands();
      console.log("Starting predictions");
    }

    async function initCamera(width, height, fps) {

      const constraints = {
        audio: false,
        video: {
          facingMode: "user",
          width: width,
          height: height,
          frameRate: { max: fps }
        }
      };

      const video = document.querySelector("#pose-video");
      video.width = width;
      video.height = height;

      // get video stream
      const stream = await navigator.mediaDevices.getUserMedia(constraints);
      video.srcObject = stream;

      return new Promise(resolve => {
        video.onloadedmetadata = () => { resolve(video) };
      });
    }

    function drawPoint(ctx, x, y, r, color) {
      ctx.beginPath();
      ctx.arc(x, y, r, 0, 2 * Math.PI);
      ctx.fillStyle = color;
      ctx.fill();
    }

    window.addEventListener("DOMContentLoaded", () => {

      initCamera(
        config.video.width, config.video.height, config.video.fps
      ).then(video => {
        video.play();
        video.addEventListener("loadeddata", event => {
          console.log("Camera is ready");
          main();
        });
      });

      const canvas = document.querySelector("#pose-canvas");
      canvas.width = config.video.width;
      canvas.height = config.video.height;
      console.log("Canvas initialized");
    });
  </script>

</body>
</html>